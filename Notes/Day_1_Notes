# -*- coding: utf-8 -*-
"""DAY 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dBYSdO_lVjSJmPjhALnxeS7ba_0AyVfm
"""

import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""# SQL Basics
* ### SQL Select

select * from table_name

where condition

EX:

select *

from empinfo

where first LIKE '%Mary%';

* Operators

=	Equal

\>	Greater than

<	Less than

\>=	Greater than or equal

<=	Less than or equal

<>	Not equal to

LIKE	*See note below

## Creating Tables

create table "tablename"

("column1" "data type",

 "column2" "data type",

 "column3" "data type");

EX:

create table employee

(first varchar(15),

 last varchar(20),

 age number(3),

 address varchar(30),

 city varchar(20),

 state varchar(20));

* Important to note the numbers for parameters are Characters, And number of digits

char(size)	Fixed-length character string. Size is specified in parenthesis. Max 255 bytes.

varchar(size)	Variable-length character string. Max size is specified in parenthesis.

number(size)	Number value with a max number of column digits specified in parenthesis.

date	Date value

number(size,d)	Number value with a maximum number of digits of “size” total, with a maximum number of “d” digits to the right of the decimal.

## Insert into table

EX: insert into employee

  (first, last, age, address, city, state)

  values ('Luke', 'Duke', 45, '2130 Boars Nest',
          'Hazard Co', 'Georgia');

# Choosing right graph for data

Understanding Your Data and Visualization Goals
Before diving into specific chart types, it’s essential to understand the nature of your data and the message you want to convey. Consider the following questions:

* What is the primary purpose of the visualization?

* Are you comparing values, showing trends over time, illustrating relationships, or displaying the composition of data?

* What type of data are you working with?

* Is it categorical, numerical, or a mix of both?

* How many variables are you visualizing?

* Are you dealing with a single variable, two variables, or multiple variables?

* What is the volume of data points?

* Do you have a few data points or a large dataset?

## 1.) Bar Chart
* Typically used while comparing Categorical data, distributions, rankings( like ranking shareholders for a company), and progress management like:
"""

X = ["Soccer Ball", "Tennis Ball", "Football", 'Basketball']
y = np.random.randint(10, 100, 4)
y , X

plt.figure(figsize=(10,5))
plt.bar(X,y, color = ['red', 'green', 'blue', 'purple'])
plt.ylabel("Sales Price")
plt.title("Big 5 Sales")
plt.show()

# Project Progress
X = ["Programmer I", "Programmer II", "Programmer III", "Programmer IV"]
y = np.random.randint(10, 100, 4)
plt.figure(figsize=(10,5))
plt.bar(X,y, color=['blue', 'yellow', 'orange', 'red'])
plt.ylim(0,100)
plt.title('Progress report')
plt.ylabel('Progresss')
plt.show()

"""# 2.) Histogram
* Use to plot distributions of data
* Used to identify outliers and over central tendiencies
"""

plt.figure(figsize=(10,5))
plt.hist(np.random.randint(0,10000, 100))
plt.ylabel("Frequency")
plt.xlabel("Feature X")
plt.title("Distribution of data")
plt.show()

"""# 3.) Scatter Plots
* Correlations between data
"""

plt.figure(figsize=(10,6))
plt.scatter(np.random.randint(0,50,25), np.random.randint(0,50,25), color='red')
plt.title("Correlation Plot")
plt.show()

"""# 4.) Pie Chart
* To show distribution
* To show percentages of data as a whole
"""

plt.figure(figsize=(10,5))
plt.pie(np.random.randint(0,100,5), labels=['A', 'B', 'C', 'D', 'E'], autopct="%1.1f%%")
plt.title("Distribution")
plt.show()

"""# 5.) Line Chart
* Trend Analysis
* visual linear or seemlingly linear trends.
"""

plt.figure(figsize=(10,5))
plt.plot([1,2,3,4,5], [5,10,15,20,25],marker='o', linestyle='-', color='red')
plt.title("Line Chart")
plt.show()

"""# 6.) HeatMap
* Used for correlation detection
* Anomaly detection
* User Engagement
"""

# Using seaborn for simplicity
sns.heatmap(np.random.rand(5,7), annot=True, fmt=".1f")
np.random.rand(5,7).shape
# 2D array with 5 rows 7 columns

"""# 7.) Bubble Chart
* Useful for identifying groups between THREE variabels using bubbles
* Super Cool
"""

sales_volume = np.random.randint(100,500,10)
profit_margin = np.random.randint(10,50,10)
size = np.random.randint(100,500,10)
#
plt.figure(figsize=(10,5))
plt.scatter(sales_volume, profit_margin,  s=size, alpha=0.5)
plt.xlabel("Sales Volume")
plt.ylabel("Profit Margin")
plt.title("Bubble Chart")
plt.show()

"""# 8.) Box Plot
* Another great way to visualize distributions
"""

plt.figure(figsize=(10,5))
plt.boxplot(np.random.randint(0,10000,100))
plt.show()

"""# 9.) Area Chart
* Makes it easier to visualize loss/gain
"""

plt.figure(figsize=(10,5))
plt.stackplot([1,2,3,5,6,7,8], [5,8,10,12,6,7,9])
plt.show()

"""# 10.) Column Chart
* Column Chart can take mutiple features and useful for viewing sometime over time
"""

plt.figure(figsize=(10,5))
plt.bar(X,y, color=['red', 'green', 'blue', 'purple'])
plt.ylabel("Sales Price")
plt.title("Big 5 Sales")
plt.show()
# similar but key differnce it is that the bars are horizational and perpendicular to the y axis

"""# 11.) Violin Plot
* Good for showing distribution when there are multiple sub groups
"""

plt.figure(figsize=(10,5))
sns.violinplot(x=np.random.randint(0,100,100))
plt.show()

"""# General Notes

## Standard Sqaure Error
* So we square the error because we dont want negative error, pretty smart right
"""